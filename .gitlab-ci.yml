# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: uogsoe/soe-php-apache:7.1-ci

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - mysql:5.7

variables:
  MYSQL_DATABASE: homestead
  MYSQL_ROOT_PASSWORD: secret
  MYSQL_USER: homestead
  MYSQL_PASSWORD: secret

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
    - vendor/
    - node_modules/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  # Update packages
  - apt-get update -yqq

  # Install dependencies
  - apt-get install -y git gnupg2

  # Install php extensions
  # - docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
  # - docker-php-ext-install mbstring pdo_mysql curl json intl gd xml zip bz2 opcache gd gmp bcmath pcntl ldap sysvmsg

  # Install & enable Xdebug for code coverage reports
  #- pecl install xdebug
  #- docker-php-ext-enable xdebug

  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly
  # DB_HOST=mysql
  # DB_DATABASE=project_name
  # DB_USERNAME=root
  # DB_PASSWORD=secret
  - cp .env.gitlab .env

  # Install Composer and project dependencies.
  #- curl -sS https://getcomposer.org/installer | php
  - composer install

  # If you need Node.js
  #- curl -sL https://deb.nodesource.com/setup_8.x | bash -
  #- apt-get install -y nodejs
  #- npm install
  #- npm run dev

  # Generate an application key. Re-cache.
  - php artisan key:generate
  - php artisan cache:clear
  - php artisan view:clear
  - php artisan route:clear
  - php artisan clear-compiled
  - php artisan config:cache

  # Run database migrations.
  - php artisan migrate:fresh

  # Output php version and memory limit
  - php --version
  - php -i | grep memory_limit

test:
  script:
    # run laravel tests
    - php vendor/bin/phpunit -d memory_limit=1024M --stop-on-failure --coverage-text --colors=never
    # run frontend tests
    # if you have any task for testing frontend
    # set it in your package.json script
    # comment this out if you don't have a frontend test
    # - npm test
